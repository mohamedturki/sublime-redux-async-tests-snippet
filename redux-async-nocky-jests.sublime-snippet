<snippet>
	<content><![CDATA[
import axios from 'axios';
import httpAdapter from 'axios/lib/adapters/http';
import nock from 'nock';
import thunk from 'redux-thunk';
import configureMockStore from 'redux-mock-store';

import { mockSuccessfulAPIRequest, mockFailedAPIRequest} from '../../utilities/test-utils/mockAPI';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

axios.defaults.hosts = API_HOST;
axios.defaults.adapter = httpAdapter;

describe('${0}-actionCreators', () => {
    afterEach(() => {
        nock.cleanAll();
    });

	describe('${1}()', () => {
		it('dispatches `${2}Success` when ${3} succeeds', () => {
		    const successResponseBody = {${4}};
		    const expectedActions = [
				${5}
		    ];
		    const store = mockStore({
				${6}
		    });

		    mockSuccessfulAPIRequest('GET', '/api/${7}', successResponseBody);

		    return store
		        .dispatch(${1}())
		        .then(() => {
		            expect(store.getActions()).toEqual(expectedActions);
		        });
		});

		it('dispatches `${2}Failure` when fetching locations fails', () => {
		    const failureResponseBody = {
				${8}
		    };
		    const expectedActions = [
				${9}
		    ];
		    const store = mockStore({
				${6}
		    });

		    mockFailedAPIRequest('GET', '/api/${7}', failureResponseBody);

		    return store
		        .dispatch(${1}())
		        .then(() => {
		            expect(store.getActions()).toEqual(expectedActions);
		        });
		});
	});

});

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>descaats</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.js</scope>
</snippet>